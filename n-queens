In this method we need O(N) FOR row, O(N) for column, O(N) for diagonal we need.

class Solution {
    public List<List<String>> solveNQueens(int n) {
        char[][] board=new char[n][n];
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                board[i][j]='.';
            }
        }
        List<List<String>> list=new ArrayList<>();
        dfs(0,board,list);
        return list;
    }
    static void dfs(int col,char[][] board, List<List<String>> list){
        if(col==board.length){
            list.add(adding(board));
            return;
        }
        for(int row=0;row<board.length;row++){
            if(validate(board,row,col)){
                board[row][col]='Q';
                dfs(col+1,board,list);
               board[row][col]='.';
            }
        }
    }
    static boolean validate(char[][] board, int row,int col){
        int duprow=row;
        int dupcol=col;
        while(row>=0 && col>=0){
          if(board[row][col]=='Q') return false;
          row--;
          col--;
        }

        row=duprow;
        col=dupcol;
        while(col>=0){
         if(board[row][col]=='Q') return false;
         col--;
        }
        
        row=duprow;
        col=dupcol;
        while(row<board.length && col>=0 ){
          if(board[row][col]=='Q') return false;
          row++;
          col--;
        }
        return true;
    }
    static List<String> adding(char[][] board){
        List<String> res=new ArrayList<>();
        for(int i=0;i<board.length;i++){
            String s=new String(board[i]);
            res.add(s);
        }
        return res;
    }
}
