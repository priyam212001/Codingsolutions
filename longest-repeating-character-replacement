https://leetcode.com/problems/longest-repeating-character-replacement/description/

Time-complexity:O(N)  Space-complexity:O(1)
class Solution {
    public int characterReplacement(String s, int k) {
        int left=0,right=0,maxlen=0,maxfreq=0;
        Map<Character,Integer> map=new HashMap<>();
        while(right<s.length()){
           char c=s.charAt(right);
           map.put(c,map.getOrDefault(c,0)+1);
           maxfreq=Math.max(maxfreq,map.get(c));

           while((right-left+1)-maxfreq>k){
            char j=s.charAt(left);
            map.put(j,map.get(j)-1);
            left++;
           }
           if((right-left+1)-maxfreq<=k){
            maxlen=Math.max(maxlen,(right-left+1));
            right++;
           }

        }
        return maxlen;
    }
}
