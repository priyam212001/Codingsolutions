https://takeuforward.org/data-structure/count-partitions-with-given-difference-dp-18/

Memoization:Time-complexity:O(N*SUM)  Space-complexity:O(N*M) +O(N)
import java.util.*;

class Main {
    public static int func(int arr[],int target,int ind,int[][] dp){
        if(ind==0){
            if(target==0 && arr[0]==0) return 2;
            if(target==0 ||target==arr[ind]) return 1;
            return 0;
        }
        if(dp[ind][target]!=-1) return dp[ind][target];
        int nottake=func(arr,target,ind-1,dp);
        int take=0;
        if(arr[ind]<=target)
        take=func(arr,target-arr[ind],ind-1,dp);
        
        return dp[ind][target]=take+nottake;
        
    }
    public static int findWays(int arr[],int d){
        int n=arr.length;
        int totsum=0;
         for(int i=0;i<arr.length;i++){
             totsum+=arr[i];
         }
         if(totsum-d<0 && (totsum-d)%2==1) return 0;
         int s=(totsum-d)/2;
        int dp[][]=new int[n][s+1];
        
        for(int row[]:dp){
            Arrays.fill(row,-1);
        } 
        return func(arr,s,n-1,dp);
    }
     public static void main(String args[]) {
        int arr[] = {0,1, 2, 2, 3};
        int d = 3;

       
        System.out.println("The number of subsets found are " + findWays(arr, d));
    }
}
