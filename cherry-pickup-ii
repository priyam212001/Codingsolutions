https://leetcode.com/problems/cherry-pickup-ii/description/

Recursion:3^N*3^M
class Solution {
    public static int func(int i,int j1,int j2,int m,int n,int[][] grid){
        if(j1<0 || j2<0 || j1>=n || j2>=n){
            return (int)Math.pow(-10,9);
        }
        if(i==m-1) 
        {
            if(j1==j2) return grid[i][j1];
            else{
                return grid[i][j1]+grid[i][j2];
            }
        }
        int maxi=Integer.MIN_VALUE;

        for(int dj1=-1;dj1<=+1;dj1++){
           for(int dj2=-1;dj2<=+1;dj2++){
            int value=0;
            if(j1==j2){
              value=grid[i][j1] +func(i+1,j1+dj1,j2+dj2,m,n,grid);
            }
            else{
              value=grid[i][j1]+grid[i][j2]+ func(i+1,j1+dj1,j2+dj2,m,n,grid);
            }
           
            maxi=Math.max(maxi,value);
           }
        }
        return maxi;
    }
    public int cherryPickup(int[][] grid) {
        int m=grid.length;
        int n=grid[0].length;

        return func(0,0,n-1,m,n,grid);
    }
}

Memoization:Time-complexity:O(N*M) Space-complexity:O(N*M)+O(N)

class Solution {
    public static int func(int i,int j1,int j2,int m,int n,int[][] grid,int[][][] dp){
        if(j1<0 || j2<0 || j1>=n || j2>=n){
            return (int)Math.pow(-10,9);
        }
        if(i==m-1) 
        {
            if(j1==j2) return grid[i][j1];
            else{
                return grid[i][j1]+grid[i][j2];
            }
        }
        if(dp[i][j1][j2]!=-1) return dp[i][j1][j2];
        int maxi=Integer.MIN_VALUE;

        for(int dj1=-1;dj1<=+1;dj1++){
           for(int dj2=-1;dj2<=+1;dj2++){
            int value=0;
            if(j1==j2){
              value=grid[i][j1] +func(i+1,j1+dj1,j2+dj2,m,n,grid,dp);
            }
            else{
              value=grid[i][j1]+grid[i][j2]+ func(i+1,j1+dj1,j2+dj2,m,n,grid,dp);
            }
           
            maxi=Math.max(maxi,value);
           }
        }
        return dp[i][j1][j2]=maxi;
    }
    public int cherryPickup(int[][] grid) {
        int m=grid.length;
        int n=grid[0].length;
        int[][][] dp=new int[m][n][n];
        for (int row1[][] : dp) {
      for (int row2[] : row1) {
        Arrays.fill(row2, -1);
      }
    }

        return func(0,0,n-1,m,n,grid,dp);
    }
}



