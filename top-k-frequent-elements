https://leetcode.com/problems/top-k-frequent-elements/description/

MaxHeap: Time-complexity:O(nlogk)   Space-complexity:O(K)
class Solution {
    public int[] topKFrequent(int[] nums, int k) {
      Map<Integer,Integer> mp=new HashMap<>();

      for(int i=0;i<nums.length;i++){
           mp.put(nums[i], mp.getOrDefault(nums[i], 0) + 1);
      }
      
     PriorityQueue<Map.Entry<Integer,Integer>> maxHeap=new PriorityQueue<>((a,b)->(b.getValue()-a.getValue()));

     for(Map.Entry<Integer,Integer> entry:mp.entrySet()){
        maxHeap.add(entry);
     }
    int size=Math.min(k,mp.size());
    
     int ans[]=new int[size];
     int i=0;
     while(i<size && !maxHeap.isEmpty()){
        ans[i++]=maxHeap.poll().getKey();
     }
     return ans;

       
    }
}
