https://leetcode.com/problems/wildcard-matching/submissions/1734611802/

Recursion:Time-complexity:Exponential Space-complexity:O(N+M)
class Solution {
    public boolean func(int i, int j, String s1, String s2) {
        if (i < 0 && j < 0) return true; 
        if (i < 0 && j >= 0) return false; 
        if (j < 0 && i >= 0) {
            for (int ii = 0; ii <= i; ii++) {
                if (s1.charAt(ii) != '*') return false; 
            }
            return true;
        }

        // Recursive cases
        if (s1.charAt(i) == s2.charAt(j)|| s1.charAt(i) == '?') {
            return func(i - 1, j - 1, s1, s2); 
        } else if (s1.charAt(i) == '*') {
            return func(i - 1, j, s1, s2) || func(i, j - 1, s1, s2); 
        }

        return false; 
    }
    public boolean isMatch(String s, String p) {
        int n1 = p.length();
        int n2 = s.length();
        

        return func(n1 - 1, n2 - 1, p, s); 
    }
}

