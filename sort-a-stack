https://takeuforward.org/plus/dsa/problems/sort-a-stack

Time Complexity:O(N*N) Space Complexity: O(n)
import java.util.Stack;

public class SortStackDescending {

    // Function to sort the stack in descending order
    public static void sortStack(Stack<Integer> stack) {
        if (!stack.isEmpty()) {
            // Remove the top element
            int top = stack.pop();

            // Recursively sort the remaining stack
            sortStack(stack);

            // Insert the top element back in the sorted stack
            insertInSortedOrder(stack, top);
        }
    }

    // Helper function to insert an element into the sorted stack
    private static void insertInSortedOrder(Stack<Integer> stack, int element) {
        // Base case: If the stack is empty or the top of the stack is greater than or equal to the element
        if (stack.isEmpty() || stack.peek() >= element) {
            stack.push(element);
            return;
        }

        // Remove the top element
        int top = stack.pop();

        // Recursively insert the element into the sorted stack
        insertInSortedOrder(stack, element);

        // Push the top element back
        stack.push(top);
    }

    public static void main(String[] args) {
        Stack<Integer> stack = new Stack<>();
        stack.push(4);
        stack.push(1);
        stack.push(3);
        stack.push(2);

        System.out.println("Original Stack: " + stack);

        sortStack(stack);

        System.out.println("Sorted Stack (Descending Order): " + stack);
    }
}
