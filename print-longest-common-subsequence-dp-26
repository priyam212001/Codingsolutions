https://takeuforward.org/data-structure/print-longest-common-subsequence-dp-26/

Tabulation:Time-complexity:O(N*M)  Space-complexity:O(N*M)
import java.util.*;
class Solution {
    public static void main(String[] args){
        String s1="abcde";
        String s2="bdgek";
        
        longestCommonSubsequence(s1,s2);
    }
    public static void longestCommonSubsequence(String text1, String text2) {
        int n1=text1.length();
        int n2=text2.length();
       int[][] dp=new int[n1+1][n2+1];
       for (int rows[] : dp)
            Arrays.fill(rows, -1);

       for(int j=0;j<=n2;j++) dp[0][j]=0;
       for(int i=0;i<=n1;i++) dp[i][0]=0;

       for(int i=1;i<=n1;i++){
        for(int j=1;j<=n2;j++){
            if(text1.charAt(i-1)==text2.charAt(j-1))  dp[i][j]=1+ dp[i-1][j-1];
            else
             dp[i][j]=Math.max(dp[i-1][j],dp[i][j-1]);
        }
       }
        int len= dp[n1][n2];
        String ans="";
        
        for(int i=0;i<len;i++){
            ans+="$";
        }
        StringBuilder str2=new StringBuilder(ans);
        int i=n1,j=n2;
        int ind=len-1;
        while(i>0 && j>0){
            if(text1.charAt(i-1)==text2.charAt(j-1)){
                str2.setCharAt(ind,text1.charAt(i-1) ); 
                
            ind--;
            i--;
            j--;
            }
            else if(text1.charAt(i-1)>text2.charAt(j-1)){
            i--;
        }
        else j--;
        }
        System.out.print(str2);
    }
}
