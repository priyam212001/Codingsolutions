https://leetcode.com/problems/length-of-longest-subarray-with-at-most-k-frequency/description/

Time-complexity:O(N)  Space-complexity:O(1)
class Solution {
    public int maxSubarrayLength(int[] nums, int k) {
        int left=0,right=0,maxlen=0;
        HashMap<Integer,Integer> map=new HashMap<>();
        while(right<nums.length){
          map.put(nums[right],map.getOrDefault(nums[right],0)+1);
          while(map.get(nums[right])>k){
            map.put(nums[left],map.get(nums[left])-1);
            left++;
          }

          if(map.get(nums[right])<=k){
            maxlen=Math.max(maxlen,right-left+1);
            right++;
          }
        }
        return maxlen;
    }
}
