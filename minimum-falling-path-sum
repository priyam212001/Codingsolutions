https://leetcode.com/problems/minimum-falling-path-sum/description/

Memoization:Time-complexity: O(N*M)  Space-complexity:O(N*M)+O(N){Path lengeth}
class Solution {
    public static int func(int i,int j, int[][] matrix,int n,int m,int dp[][]){
        if(j<0 || j>=m) 
        return (int)Math.pow(10,9);
        if(i==0) return matrix[0][j];

        if(dp[i][j]!=-1) return dp[i][j];

        int stra=matrix[i][j]+func(i-1,j,matrix,n,m,dp);
        int left=matrix[i][j]+func(i-1,j-1,matrix,n,m,dp);
        int right=matrix[i][j]+func(i-1,j+1,matrix,n,m,dp);

        return dp[i][j]=Math.min(stra,Math.min(left,right)); 
    }
    public int minFallingPathSum(int[][] matrix) {
        int n=matrix.length;
        int m=matrix[0].length;
       int minn=Integer.MAX_VALUE;
       int dp[][]=new int[n][m];
       for(int row[]:dp){
        Arrays.fill(row,-1);
       }

        for(int i=0;i<m;i++){
         minn=Math.min(minn, func(n-1,i,matrix,n,m,dp));
        }
        return minn;
    }
}

Tabulation: Time-complexity: O(N*M)+O(M){FOR FINDING ALL MIN VALUE FROM DP}  Space-complexity:O(N*M)
class Solution {
   
    public int minFallingPathSum(int[][] matrix) {
        int n=matrix.length;
        int m=matrix[0].length;
       int dp[][]=new int[n][m];
       
       for(int j=0;j<m;j++){
        dp[0][j]=matrix[0][j];
       }

       for(int i=1;i<n;i++){
        for(int j=0;j<m;j++){
            int s=matrix[i][j]+dp[i-1][j];
            int left=matrix[i][j],right=matrix[i][j];
            if(j-1>=0)  
              left=matrix[i][j]+dp[i-1][j-1];
              else{
                left+=(int)Math.pow(10,9);
              }
            if(j+1<m)  
              right=matrix[i][j]+dp[i-1][j+1];
            else{
                right+=(int)Math.pow(10,9);
              
            }

            dp[i][j]=Math.min(s,Math.min(left,right));
        }
       }
       int maxi=dp[n-1][0];

       for(int j=0;j<m;j++){
        maxi=Math.min(maxi,dp[n-1][j]);
       }
      return maxi;
       
    }
}

  Space-optimization: Time-complexity: O(N*M)+O(N)  Space-complexity:O(1)

class Solution {
   
    public int minFallingPathSum(int[][] matrix) {
        int n=matrix.length;
        int m=matrix[0].length;
        int[] prev=new int[m];
        int curr[]=new int[m];

        for(int j=0;j<m;j++){
            prev[j]=matrix[0][j];
        }

       for(int i=1;i<n;i++){
        for(int j=0;j<m;j++){
            int s=matrix[i][j]+prev[j];
            int left=matrix[i][j],right=matrix[i][j];
            if(j-1>=0)  
              left=matrix[i][j]+prev[j-1];
              else{
                left+=(int)Math.pow(10,9);
              }
            if(j+1<m)  
              right=matrix[i][j]+prev[j+1];
            else{
                right+=(int)Math.pow(10,9);
              
            }

            curr[j]=Math.min(s,Math.min(left,right));
        }
        prev=curr.clone();
       }
       int maxi=Integer.MAX_VALUE;

       for(int j=0;j<m;j++){
        maxi=Math.min(maxi,prev[j]);
       }
      return maxi;
       
    }
}
