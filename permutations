Time-complexity:N! * N
Space-complexity:O(N)+O(N)

class Solution {
    public static void count(int[] nums,List<List<Integer>> list,List<Integer> ds,boolean[] freq){
        if(ds.size()==nums.length){
            list.add(new ArrayList<>(ds));
            return;
        }
        for(int i=0;i<nums.length;i++){
            if(!freq[i]){
                freq[i]=true;
                ds.add(nums[i]);
                count(nums,list,ds,freq);
                ds.remove(ds.size()-1);
                freq[i]=false;
            }
        }

    }
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> list=new ArrayList<>();
        List<Integer> ds=new ArrayList<>();
        boolean[] freq=new boolean[nums.length];

        count(nums,list,ds,freq);
        return list;

    }
}
