Time-complexity:N! * N
Space-complexity:O(N)+O(N)

class Solution {
    public static void count(int[] nums,List<List<Integer>> list,List<Integer> ds,boolean[] freq){
        if(ds.size()==nums.length){
            list.add(new ArrayList<>(ds));
            return;
        }
        for(int i=0;i<nums.length;i++){
            if(!freq[i]){
                freq[i]=true;
                ds.add(nums[i]);
                count(nums,list,ds,freq);
                ds.remove(ds.size()-1);
                freq[i]=false;
            }
        }

    }
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> list=new ArrayList<>();
        List<Integer> ds=new ArrayList<>();
        boolean[] freq=new boolean[nums.length];

        count(nums,list,ds,freq);
        return list;

    }
}

OPTIMAL APPROACH:
Time-complexity:N! *O(N)
Space-complexity:O(1)

class Solution {
    public static void count(int ind,int[] nums,List<List<Integer>> list){
        if(ind==nums.length){
           List<Integer> ds=new ArrayList<>();
           for(int i=0;i<nums.length;i++){
            ds.add(nums[i]);
           }
           list.add(new ArrayList<>(ds));
           return;
        }
        for(int i=ind;i<nums.length;i++){
            swap(i,ind,nums);
            count(ind+1,nums,list);
             swap(i,ind,nums);
        }

    }
    private static  void swap(int ind1,int ind2,int nums[]){
        int temp=nums[ind1];
        nums[ind1]=nums[ind2];
        nums[ind2]=temp;
    }
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> list=new ArrayList<>();

        count(0,nums,list);
        return list;

    }
}
