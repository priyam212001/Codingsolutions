https://takeuforward.org/plus/dsa/problems/frog-jump

Part-1 MEMOIZATION APPROACH(top-bottom)
Time-complexity:O(N)  Space-complexity:O(N+N)=O(N)
import java.util.*;
class Main {
    public static int solve(int ind,int[] height,int[] dp){
        if(ind==0) return 0;
        if(dp[ind]!=-1) return dp[ind];
        int two=Integer.MAX_VALUE;
        int one=solve(ind-1,height,dp)+Math.abs(height[ind]-height[ind-1]);
        if(ind>1){
            two=solve(ind-2,height,dp)+Math.abs(height[ind]-height[ind-2]);
        }
        return dp[ind]=Math.min(one,two);
    }
    public static void main(String[] args) {
       int[] height={30,10,60,10,60,50};
       int n=height.length;
       int[] dp=new int[n];
       Arrays.fill(dp,-1);
       System.out.print(solve(n-1,height,dp));
    }
}

Part-2 TABULATION APPROACH(bottom-top)
Time-complexity:O(N)  Space-complexity:O(N)
import java.util.*;
class Main {
    public static void main(String[] args) {
       int[] height={30,10,60,10,60,50};
       int n=height.length;
       int[] dp=new int[n];
       Arrays.fill(dp,-1);
       dp[0]=0;
       
       for(int i=1;i<n;i++){
           int two=Integer.MAX_VALUE;
           int one=dp[i-1]+Math.abs(height[i]-height[i-1]);
           if(i>1){
               two=dp[i-2]+Math.abs(height[i]-height[i-2]);
           }
           dp[i]=Math.min(one,two);
       }
       System.out.print(dp[n-1]);
    }
}

Part-3 SPACE OPTIMIZATION
Time-complexity:O(N)  Space-complexity:O(1)
import java.util.*;
class Main {
    public static void main(String[] args) {
       int[] height={30,10,60,10,60,50};
       int n=height.length;
       int prev=0,prev2=0;
       
       for(int i=1;i<n;i++){
           int two=Integer.MAX_VALUE;
           int one=prev+Math.abs(height[i]-height[i-1]);
           if(i>1){
               two=prev2+Math.abs(height[i]-height[i-2]);
           }
           int cur=Math.min(one,two);
           prev2=prev;
           prev=cur;
       }
       System.out.print(prev);
    }
}

