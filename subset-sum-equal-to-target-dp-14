Recursion:Time-complexity:O(2^N)  Space-complexity:O(N)

class Main {
    public static boolean subsetSumToK(int ind,int target,int[] arr){
        if(target==0) return true;
        if(ind==0) return arr[0]==target;
        
        boolean nontake=subsetSumToK(ind-1,target,arr);
        boolean take=false;
        
        if(target>=arr[ind])
        take=subsetSumToK(ind-1,target-arr[ind],arr);
        
        return nontake|| take;
    }
   public static void main(String args[]) {
        int arr[] = { 1, 2, 3, 4 };
        int k = 4;
        int n = arr.length;

        if (subsetSumToK(n-1, k, arr))
            System.out.println("Subset with the given target found");
        else
            System.out.println("Subset with the given target not found");
    }
}


Memoization:Time-complexity:O(N*TARGET)  Space-complexity:(N*TARGET)+O(N)  
import java.util.*;
class Main {
    public static boolean func(int ind,int k,int arr[],int dp[][]){
        if(k==0) return true;
        if(ind==0)
        return arr[0]==k;
        
        if(dp[ind][k]!=-1) return dp[ind][k]==0 ? false:true;
        
        boolean nontake=func(ind-1,k,arr,dp);
        boolean take=false;
        if(arr[ind]<=k){
            take=func(ind-1,k-arr[ind],arr,dp);
        }
        dp[ind][k]=nontake||take? 1:0;
        return nontake||take;
    }
    public static boolean subsetSumToK(int n,int k, int[] arr){
        int[][] dp=new int[n][k+1];
        
        for(int row[]: dp){
            Arrays.fill(row,-1);
        }
        return func(n-1,k,arr,dp);
    }
     public static void main(String args[]) {
        int arr[] = { 1, 2, 3, 4 };
        int k = 4;
        int n = arr.length;

        // Check if there exists a subset with the given target sum
        if (subsetSumToK(n, k, arr))
            System.out.println("Subset with the given target found");
        else
            System.out.println("Subset with the given target not found");
    }
}

Tabulation:Time-complexity:O(N*TARGET)  Space-complexity:(N*TARGET)

// Online Java Compiler
// Use this editor to write, compile and run your Java code online

class Main {
    public static boolean subsetSumToK(int ind,int target,int[] arr){
        boolean dp[][]=new boolean[ind][target+1];
        
        for(int i=0;i<ind;i++){
            dp[i][0]=true;
        }
        if(target>=arr[0])
        dp[0][arr[0]]=true;
        
        for(int i=1;i<ind;i++){
            for( int j=1;j<=target;j++){
                  boolean nontake=dp[i-1][j];
               boolean take=false;
        
           if(j>=arr[i])
              take=dp[i-1][j-arr[i]];
              
              dp[i][j]=take||nontake;
            }
        }
        
        return dp[ind-1][target];
    }
   public static void main(String args[]) {
        int arr[] = { 1, 2, 3, 4 };
        int k = 4;
        int n = arr.length;

        if (subsetSumToK(n, k, arr))
            System.out.println("Subset with the given target found");
        else
            System.out.println("Subset with the given target not found");
    }
}
