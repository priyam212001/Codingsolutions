https://leetcode.com/problems/distinct-subsequences/description/

Memoization:Time-complexity:O(N*M) Space-complexity:O(N*M)+O(N+M)
class Solution {
    public int lcs(int i,int j,String s1,String s2,int[][] dp){
      if(j<0) return 1;
      if(i<0) return 0;

      if(dp[i][j]!=-1) return dp[i][j];
      if(s1.charAt(i)==s2.charAt(j)){
        return dp[i][j]=lcs(i-1,j-1,s1,s2,dp)+lcs(i-1,j,s1,s2,dp);
      }
      else{
        return dp[i][j]=lcs(i-1,j,s1,s2,dp);
      }
    }
    public int numDistinct(String s, String t) {
        int n1=s.length();
        int n2=t.length();
   int[][] dp=new int[n1][n2];
   for(int row[]:dp){
    Arrays.fill(row,-1);
   }
        return lcs(n1-1,n2-1,s,t,dp);
    }
}

Tabulation:Time-complexity:O(N*M) Space-complexity:O(N*M)
class Solution {
    public int numDistinct(String s, String t) {
        int n1=s.length();
        int n2=t.length();
   int[][] dp=new int[n1+1][n2+1];
   for(int row[]:dp){
    Arrays.fill(row,-1);
   }
    for(int i=0;i<=n1;i++){
        dp[i][0]=1;
    }
    for(int j=1;j<=n2;j++){
        dp[0][j]=0;
    }

    for(int i=1;i<=n1;i++){
        for(int j=1;j<=n2;j++){
            if(s.charAt(i-1)==t.charAt(j-1)){
              dp[i][j]=dp[i-1][j-1]+dp[i-1][j];
           }
           else
               dp[i][j]=dp[i-1][j];
        }
    }
        return dp[n1][n2];
    }
}

Space-complexity:Time-complexity:O(N*M) Space-complexity:O(M+N)

