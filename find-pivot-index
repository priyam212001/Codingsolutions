https://leetcode.com/problems/find-pivot-index/description/

Time-compleixity:O(N^2)
class Solution {
    public int pivotIndex(int[] nums) {
       
        for(int i=0;i<nums.length;i++){
          int left=i-1,right=i+1;
          int sum1=0,sum2=0;
          while(left>=0){
           sum1+=nums[left];
           left--;
          }
          while(right<nums.length){
            sum2+=nums[right];
            right++;
          }
          if(sum1==sum2){
            return i;
          }
        }
        return -1;
    }
}

Time-complexity:O(N)  Space-complexity:O(1)
class Solution {
    public int pivotIndex(int[] nums) {
        int n=nums.length, current=0,totalsum=0;

        for(int i=0;i<n;i++){
            totalsum+=nums[i];
        }
        for(int i=0;i<n;i++){
            current+=nums[i];
            if(i==0 || i==n-1){
                if(totalsum-nums[i]==0){
                    return i;
                }
            }
            else if((totalsum-current==current-nums[i])){
                return i;
            }
        }
        return -1;
    }
}
