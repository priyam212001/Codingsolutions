https://leetcode.com/problems/shortest-unsorted-continuous-subarray/description/

Time-complexity:O(N)  Space-complexity:O(1)
class Solution {
    public int findUnsortedSubarray(int[] nums) {
        int n = nums.length;
        int left = 0, right = n - 1;

        // Find the first element from the left that is out of order
        while (left < n - 1 && nums[left] <= nums[left + 1]) {
            left++;
        }

        // If the array is already sorted, return 0
        if (left == n - 1) {
            return 0;
        }

        // Find the first element from the right that is out of order
        while (right > 0 && nums[right] >= nums[right - 1]) {
            right--;
        }

        // Find the min and max values in the unsorted subarray
        int min = Integer.MAX_VALUE, max = Integer.MIN_VALUE;
        for (int i = left; i <= right; i++) {
            min = Math.min(min, nums[i]);
            max = Math.max(max, nums[i]);
        }

        // Expand the left boundary to include any number greater than min
        while (left > 0 && nums[left - 1] > min) {
            left--;
        }

        // Expand the right boundary to include any number smaller than max
        while (right < n - 1 && nums[right + 1] < max) {
            right++;
        }

        // Return the length of the unsorted subarray
        return right - left + 1;
    }
}
