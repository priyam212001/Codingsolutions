https://takeuforward.org/dynamic-programming/matrix-chain-multiplication-dp-48/

Memoization:Time-complexity:O(N^3)  Space-complexity:O(N^2)+O(N)
import java.util.*;
class Main {
    public static int func(int i,int j,int arr[],int n,int dp[][]){
        if(i==j) return 0;
        int mini=Integer.MAX_VALUE;
        if(dp[i][j]!=-1) return dp[i][j];
        for(int k=i;k<=j-1;k++){
            int steps=arr[i-1]*arr[k]*arr[j]+func(i,k,arr,n,dp)+func(k+1,j,arr,n,dp);
            if(steps<mini) mini=steps;
        }
        return dp[i][j]=mini;
    }
    public static int matrixMultiplication(int arr[],int n){
        int dp[][]=new int[n][n];
        for(int row[]: dp) Arrays.fill(row,-1);
        return func(1,n-1,arr,n,dp);
    }
    public static void main(String args[]) {
	
	int arr[] = {10, 20, 30, 40, 50};
	
	int n = arr.length;
	
	System.out.println("The minimum number of operations are "+
        matrixMultiplication(arr,n));
	
}
}

Tabulation:Time-complexity:O(N^3)  Space-complexity:O(N^2)

import java.util.*;
class Main {
    public static int matrixMultiplication(int arr[],int n){
        int dp[][]=new int[n][n];
        for(int row[]: dp) Arrays.fill(row,-1);
        
        for(int i=1;i<n;i++){
            dp[i][i]=0;
        }
       
        for(int i=n-1;i>=1;i--){
            for(int j=i+1;j<n;j++){
                 int mini=Integer.MAX_VALUE;
                for(int k=i;k<=j-1;k++){
             int steps=arr[i-1]*arr[k]*arr[j]+dp[i][k]+dp[k+1][j];
            if(steps<mini) mini=steps;
        }
         dp[i][j]=mini;
            }
        }
        return dp[1][n-1];
    }
    public static void main(String args[]) {
	
	int arr[] = {10, 20, 30, 40, 50};
	
	int n = arr.length;
	
	System.out.println("The minimum number of operations are "+
        matrixMultiplication(arr,n));
	
}
}
