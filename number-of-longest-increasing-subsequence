https://leetcode.com/problems/number-of-longest-increasing-subsequence/description/

Time-complexity:O(N*N)  Space-complexity:O(N)
class Solution {
    public int findNumberOfLIS(int[] arr) {
        int n=arr.length;

        int dp[]=new int[n];
        int cnt[]=new int[n];

        Arrays.fill(dp,1);
    Arrays.fill(cnt,1);
    
    int maxi = 1;

    for(int i=0;i<n;i++){
        for(int prev=0;prev<i;prev++){
            if(arr[i]>arr[prev] && 1+dp[prev]>dp[i]){
             dp[i]=dp[prev]+1;
             cnt[i]=cnt[prev];
            }
            else if(arr[i]>arr[prev] && 1+dp[prev]==dp[i]){
            cnt[i]+=cnt[prev];
            }
        }
        maxi=Math.max(maxi,dp[i]);
    }
     int nos =0;
    
    for(int i=0; i<=n-1; i++){
       if(dp[i]==maxi) nos+=cnt[i];
    }
    
    return nos;
    }
}
