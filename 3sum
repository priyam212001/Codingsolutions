https://leetcode.com/problems/3sum/description/

Brute-Approach: Time-complexity: O(n^3) + log(number of triplet)  Space-complexity: 2*O(no of triplet)
 public List<List<Integer>> threeSum(int[] nums) {
        Set<List<Integer>> uniqueTriplets = new HashSet<>();
        for (int i = 0; i < nums.length; i++) {
            for (int j = i + 1; j < nums.length; j++) {
                for (int k = j + 1; k < nums.length; k++) {
                    if (nums[i] + nums[j] + nums[k] == 0) {
                       List<Integer> temp = Arrays.asList(nums[i], nums[j], nums[k]);
                        Collections.sort(temp);
                        uniqueTriplets.add(temp);
                    }
                }
            }
 }
        return new ArrayList<>(uniqueTriplets);
    }
}

Better-Approach: Time-complexity: O(n2)* log M(size of set) Space-complexity: O(n)+O(no of triplet)*2
public List<List<Integer>> threeSum(int[] nums) {
        Set<List<Integer>> ans=new HashSet<>();
        Set<Integer> st=new HashSet<>();
        
        for(int i=0;i<nums.length;i++){
            for(int j=i+1;j<nums.length;j++){
                   int sum=-(nums[i]+nums[j]);
                   if(st.contains(sum)){
                   List<Integer> temp=Arrays.asList(nums[i],nums[j],sum);
                    Collections.sort(temp);
                    ans.add(temp);
                   }
                   st.add(nums[j]);
                    }
                    st.clear();
                
            }
        
        return new ArrayList<>(ans);
    }

Optimal-Approach: Time-complexity: n(logn)[sort the array] +O(n*n) Space-complexity: O(no of triplet)[We can ignore this one]
public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> ans=new ArrayList<>();
       Arrays.sort(nums);
       for(int i=0;i<nums.length;i++){
        if(i>0 && nums[i]==nums[i-1]){
            continue;
        }
        int j=i+1;
        int k=nums.length-1;
        while(j<k){
        int sum=nums[i]+nums[j]+nums[k];
        if(sum<0){
            j++;
        }
        else if(sum>0){
           k--;
        }
        else{
         List<Integer> temp=Arrays.asList(nums[i],nums[j],nums[k]);
         ans.add(temp);
         j++;
         k--;
         while(j<k && nums[j]==nums[j-1]){
            j++;
         }
         while(j<k && nums[k]==nums[k+1]){
            k--;
         }
        }
        }
       }
        
        return ans;
    }
