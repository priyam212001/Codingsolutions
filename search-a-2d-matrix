https://leetcode.com/problems/search-a-2d-matrix/description/

Time-complexity:O(log(m*n))
class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int row=serchRow(matrix,target);
        if(row!=-1){
            return serchelement(row,matrix,target);
        }
        return false;
    }
    static int serchRow(int[][] matrix,int target){
        int start=0;
        int end=matrix.length-1;
        while(start<=end){
            int mid=start+(end-start)/2;
            if(target>=matrix[mid][0] && target<=matrix[mid][matrix[mid].length-1]){
                return mid;
            }
            else if(target>matrix[mid][0]){
                start=mid+1;
            }
            else{
                end=mid-1;
            }
        }
        return -1;
    }
    static boolean serchelement(int row,int matrix[][],int target){
        int start=0;
        int end=matrix[row].length-1;
        while(start<=end){
            int mid=start+(end-start)/2;

            if(target==matrix[row][mid]) return true;
            else if(target>matrix[row][mid]){
                start=mid+1;
            }
            else{
                end=mid-1;
            }
        }
        return false;
    }
}
