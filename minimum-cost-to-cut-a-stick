https://leetcode.com/problems/minimum-cost-to-cut-a-stick/

Recusion: Exponential
class Solution {
    public int func(int i,int j,int cuts[]){
        if(i>j) return 0;

        int mini=Integer.MAX_VALUE;
        for(int ind=i;ind<=j;ind++){
            int ans=cuts[j+1]-cuts[i-1]+func(i,ind-1,cuts)+func(ind+1,j,cuts);
            mini=Math.min(ans,mini);
        }
        return mini;
    }
    public int minCost(int n, int[] cuts) {
        int c=cuts.length;
        Arrays.sort(cuts);
        int[] arr=new int[c+2];
        arr[0]=0;
        arr[c+1]=n;

        for(int i=1;i<c+1;i++){
            arr[i]=cuts[i-1];
        }
        Arrays.sort(arr);

        return func(1,c,arr);
       
    }
}

Mmeoization: Time-complexity:O(N^3)  Space-complexity:O(N^2)+O(N)
class Solution {
    public int func(int i,int j,int cuts[],int dp[][]){
        if(i>j) return 0;
        if(dp[i][j]!=-1) return dp[i][j];
        int mini=Integer.MAX_VALUE;
        for(int ind=i;ind<=j;ind++){
            int ans=cuts[j+1]-cuts[i-1]+func(i,ind-1,cuts,dp)+func(ind+1,j,cuts,dp);
            mini=Math.min(ans,mini);
        }
        return dp[i][j]=mini;
    }
    public int minCost(int n, int[] cuts) {
        int c=cuts.length;
        Arrays.sort(cuts);
        int[] arr=new int[c+2];
        arr[0]=0;
        arr[c+1]=n;
        int dp[][]=new int[c+1][c+1];
        for(int row[]:dp) Arrays.fill(row,-1);

        for(int i=1;i<c+1;i++){
            arr[i]=cuts[i-1];
        }

        return func(1,c,arr,dp);
       
    }
}


Tabulation:Time-complexity:O(N^3)  Space-complexity:O(N^2)
class Solution {
    public int minCost(int n, int[] cuts) {
        int c=cuts.length;
        Arrays.sort(cuts);
        int[] arr=new int[c+2];
        arr[0]=0;
        arr[c+1]=n;
        int dp[][]=new int[c+2][c+2];
        for(int row[]:dp) Arrays.fill(row,0);

        for(int i=1;i<c+1;i++){
            arr[i]=cuts[i-1];
        }

        for(int i=c;i>=1;i--){
            for(int j=1;j<=c;j++){
                 if(i>j)  continue;
       
               int mini=Integer.MAX_VALUE;
             for(int ind=i;ind<=j;ind++){
               int ans=arr[j+1]-arr[i-1]+dp[i][ind-1]+dp[ind+1][j];
                mini=Math.min(ans,mini);
            }
            dp[i][j]=mini;
            }
        }

        return dp[1][c];
       
    }
}
