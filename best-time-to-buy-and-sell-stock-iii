https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/

Memoization:Time-complexity:O(N*2*3) Space Complexity: O(N*2*3) + O(N)
class Solution {
    public int func(int ind,int buy,int cap,int[] prices,int n,int[][][] dp){
        if(cap==0 || ind==n) return 0;
        int profit=0;
        if(dp[ind][buy][cap]!=-1) return dp[ind][buy][cap];
        if(buy==1){
       profit=Math.max(-prices[ind]+func(ind+1,0,cap,prices,n,dp),0+func(ind+1,1,cap,prices,n,dp));
        }
        else{
     profit=Math.max(prices[ind]+func(ind+1,1,cap-1,prices,n,dp),0+func(ind+1,0,cap,prices,n,dp));
        }
        return dp[ind][buy][cap]=profit;
    }
    public int maxProfit(int[] prices) {
        int n=prices.length;
        int dp[][][]=new int[n][2][3];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < 2; j++) {
                Arrays.fill(dp[i][j], -1);
            }
        }
        return func(0,1,2,prices,n,dp);
    }
}
Tabulation: Time-complexity:O(N*2*3) Space Complexity: O(N*2*3)
class Solution {
   
    public int maxProfit(int[] prices) {
        int n=prices.length;
        int dp[][][]=new int[n+1][2][3];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < 2; j++) {
                Arrays.fill(dp[i][j], 0);
            }
        }
    
        for(int ind=n-1;ind>=0;ind--){
            for(int buy=0;buy<=1;buy++){
                for(int cap=1;cap<=2;cap++){
                    if(buy==1){
                    dp[ind][buy][cap]=Math.max(-prices[ind]+dp[ind+1][0][cap],0+dp[ind+1][1][cap]);
                }
                 else{
               dp[ind][buy][cap]=Math.max(prices[ind]+dp[ind+1][1][cap-1],0+dp[ind+1][0][cap]);
              }
              
                }
            }
        }
        return dp[0][1][2];
    }
}
