https://leetcode.com/problems/edit-distance/description/

Recursion:Time-complexity:Exponential  Space-complexity:O(N+M)
class Solution {
    int func(int i,int j,String s1,String s2){
        if(i<0) return j+1;
        if(j<0) return i+1;

        if(s1.charAt(i)==s2.charAt(j)) return  func(i-1,j-1,s1,s2);

        return 1+Math.min(func(i-1,j,s1,s2),Math.min(func(i,j-1,s1,s2),func(i-1,j-1,s1,s2)));
    }
    public int minDistance(String word1, String word2) {
        int n1=word1.length();
        int n2=word2.length();
        return func(n1-1,n2-1,word1,word2);
    }
}

Memoization: Recursion:Time-complexity:O(N*M)  Space-complexity:O(N*M)+O(N+M)
class Solution {
    int func(int i,int j,String s1,String s2,int[][] dp){
        if(i<0) return j+1;
        if(j<0) return i+1;
         if(dp[i][j]!=-1) return dp[i][j];
        if(s1.charAt(i)==s2.charAt(j)) return  dp[i][j]=func(i-1,j-1,s1,s2,dp);

        return dp[i][j]=1+Math.min(func(i-1,j,s1,s2,dp),Math.min(func(i,j-1,s1,s2,dp),func(i-1,j-1,s1,s2,dp)));
    }
    public int minDistance(String word1, String word2) {
        int n1=word1.length();
        int n2=word2.length();
        int dp[][]=new int[n1][n2];
        for(int row[]: dp) Arrays.fill(row,-1);
        return func(n1-1,n2-1,word1,word2,dp);
    }
}

Tabulation: Recursion:Time-complexity:O(N*M)  Space-complexity:O(N*M)
class Solution {
    public int minDistance(String s1, String s2) {
        int n1=s1.length();
        int n2=s2.length();
        int dp[][]=new int[n1+1][n2+1];
        for(int i=0;i<=n1;i++){
            dp[i][0]=i;
        }

        for(int j=0;j<=n2;j++){
            dp[0][j]=j;
        }
        

        for(int i=1;i<=n1;i++){
            for(int j=1;j<=n2;j++){
                if(s1.charAt(i-1)==s2.charAt(j-1))  dp[i][j]=dp[i-1][j-1];

        else
         dp[i][j]=1+Math.min(dp[i-1][j],Math.min(dp[i][j-1],dp[i-1][j-1]));
            }
        }
        return dp[n1][n2];
    }
}
