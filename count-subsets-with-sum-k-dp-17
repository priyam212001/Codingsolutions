https://takeuforward.org/data-structure/count-subsets-with-sum-k-dp-17/

MEMOIZATION:Time-complexity:O(N*SUM)  Space-complexity:O(N*M)+O(N)
class Solution {
    public static int func(int ind,int[] nums,int target,int[][] dp){
        if(ind==0) 
        { if(nums[ind]==target){
            return 1;
        }
        return 0;

        }

        if(target==0) return 1;
 
        if(dp[ind][target]!=-1) return dp[ind][target];
        int notpick=func(ind-1,nums,target,dp);
        int pick=0;
        if(nums[ind]<=target) 
        pick=func(ind-1,nums,target-nums[ind],dp);
       
      

       return  dp[ind][target]=pick+notpick;
    }
    public int subarraySum(int[] nums, int k) {
        int n=nums.length;
        int[][] dp=new int[n][k+1];
        for(int row[]:dp){
            Arrays.fill(row,-1);
        }
        return func(n-1,nums,k,dp);
    }
}

TABULATION: Time-complexity:O(N*SUM)  Space-complexity:O(N*M)
class Solution {
    
    public int subarraySum(int[] nums, int target) {
        int n=nums.length;
        int[][] dp=new int[n][target+1];
        
        for(int i=0;i<n;i++){
            dp[i][0]=1;
        }
        if(nums[0]<=target) dp[0][nums[0]]=1;

        for(int ind=1;ind<n;ind++){
         for(int sum=1;sum<=target;sum++){
             int notpick=dp[ind-1][sum];
              int pick=0;
            if(nums[ind]<=sum) 
              pick=dp[ind-1][sum-nums[ind]];

              dp[ind][sum]=pick+notpick;
         }
        }
        return dp[n-1][target];
    }
}

Space-optimization:Time-complexity:O(N*SUM)  Space-complexity:O(N)

class Solution {
    
    public int subarraySum(int[] nums, int target) {
        int n=nums.length;
        int prev[]=new int[target+1];
        int cur[]=new int[target+1];
        prev[0]=cur[0]=1;
        
        if(nums[0]<=target) prev[nums[0]]=1;

        for(int ind=1;ind<n;ind++){
         for(int sum=1;sum<=target;sum++){
             int notpick=prev[sum];
              int pick=0;
            if(nums[ind]<=sum) 
              pick=prev[sum-nums[ind]];

             cur[sum]=pick+notpick;
         }
         prev=cur;
        }
        return prev[target];
    }
}
