Time-complexity:O(2^N)  Space-complexity:O(N)
import java.util.*;

public class Subsequence {
    public static boolean printF(int ind, List<Integer> list,int[] arr,int n,int count,int sum){
        if(ind==n) {
            if(count==sum){
            for(int i=0;i<list.size();i++){
                System.out.print(list.get(i)+",");
            }
            if(list.size()==0){
                System.out.print("{}");
            }
            System.out.println();
            return true;
            }
            return false;
        }
        list.add(arr[ind]);
        count=count+arr[ind];
        if(printF(ind+1,list,arr,n,count,sum)==true) return true;
        list.remove(list.size()-1);
         count=count-arr[ind];
        if(printF(ind+1,list,arr,n,count,sum)==true) return true;
        
        return false;
    }

    public static void main(String[] args) {
       int arr[]={1,2,1};
       int n=3;
       int sum=2;
       int count=0;
       List<Integer> list=new ArrayList<>();
       
       printF(0,list,arr,n,count,sum);
    }
}
