https://leetcode.com/problems/palindrome-linked-list/

Slow and Fast Pointer:  Time-complexity: O(N)
class Solution {
    public boolean isPalindrome(ListNode head) {
        if (head == null || head.next == null) {
            return true; 
        }

        // Step 1: Find the middle of the linked list
        ListNode slow = head;
        ListNode fast = head;

        while (fast != null && fast.next != null) {
            fast = fast.next.next;
            slow = slow.next;
        }

        // Step 2: Reverse the second half of the list
        ListNode prev = null;
        ListNode current = slow;

        while (current != null) {
            ListNode next = current.next;
            current.next = prev;         
            prev = current;              
            current = next;              
        }

        // Step 3: Compare the first half and the reversed second half
        ListNode first = head;
        ListNode second = prev;

        while (second != null) { 
            if (first.val != second.val) {
                return false; 
            }
            first = first.next;
            second = second.next;
        }

        return true; 
    }
}
