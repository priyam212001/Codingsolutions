https://takeuforward.org/data-structure/rat-in-a-maze/

Time Complexity: O(4^(m*n)), because on every cell we need to try 4 different directions.
Space Complexity:  O(m*n), Maximum Depth of the recursion tree(auxiliary space).


import java.util.*;
class Main {
    public static void solve(int i,int j,int[][] vis,int[][] a,List<String> ans,int n,String s){
        if(i==n-1 && j==n-1){
            ans.add(s);
            return;
        }
        
        //downward
        if(i+1<n && vis[i+1][j]==0 && a[i+1][j]==1){
            vis[i][j]=1;
            solve(i+1,j,vis,a,ans,n,s+'D');
            vis[i][j]=0;
        }
        
        //LEFTWARD
        if(j-1>=0 && vis[i][j-1]==0 && a[i][j-1]==1){
             vis[i][j]=1;
            solve(i,j-1,vis,a,ans,n,s+'L');
            vis[i][j]=0;
        }
        
        //RIGHTWARD
        if(j+1<n && vis[i][j+1]==0 && a[i][j+1]==1){
             vis[i][j]=1;
            solve(i,j+1,vis,a,ans,n,s+'R');
            vis[i][j]=0;
        }
        
        //UPWARD
        if(i-1>=0 && vis[i-1][j]==0 && a[i-1][j]==1){
             vis[i][j]=1;
            solve(i-1,j,vis,a,ans,n,s+'U');
            vis[i][j]=0;
        }
    }
    public static ArrayList<String> findPath(int[][] a,int n){
        int[][] vis=new int[n][n];
        for (int i = 0; i < n; i++) {
      for (int j = 0; j < n; j++) {
        vis[i][j] = 0;
      }
    }
        ArrayList<String> ans=new ArrayList<>();
        if(a[0][0]==1) solve(0,0,vis,a,ans,n,"");
        return ans;
    }
    public static void main(String[] args) {

    int n = 4;
    int[][] a = {{1,0,0,0},{1,1,0,1},{1,1,0,0},{0,1,1,1}};

    Main obj = new Main();
    ArrayList < String > res = obj.findPath(a, n);
    if (res.size() > 0) {
      for (int i = 0; i < res.size(); i++)
        System.out.print(res.get(i) + " ");
      System.out.println();
    } else {
      System.out.println(-1);
    }
  }
}
