https://takeuforward.org/data-structure/dynamic-programming-ninjas-training-dp-7/

Memoization: 

import java.util.*;
class Main {
    public static int func(int day,int last,int[][] points,int[][] dp){
        if(day==0){
            int maxi=0;
            for(int task=0;task<3;task++){
                if(task!=last){
                    maxi=Math.max(maxi,points[0][task]);
                }
            }
            return dp[day][last]=maxi;
        }
        if(dp[day][last]!=-1) return dp[day][last];
        int maxi=0;
        for(int task=0;task<3;task++){
            if(task!=last){
            int act=points[day][task]+func(day-1,task,points,dp);
                maxi=Math.max(maxi,act);
            }
        }
        return dp[day][last]=maxi;
    }
    public static int ninjaTraining(int n, int[][] points){
        int[][] dp=new int[n][4];
        for(int[] row:dp){
            Arrays.fill(row,-1);
        }
        return func(n-1,3,points,dp);
    }
    public static void main(String[] args) {
       int[][] points = {{10, 40, 70},
                          {20, 50, 80},
                          {30, 60, 90}};

        int n = points.length; // Get the number of days
        System.out.println(ninjaTraining(n, points));
    }
}
