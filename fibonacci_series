Part-1 Memoization

Time-complexity:O(N)  Space-complexity:O(N+N)  {array+stack}
import java.util.*;
class Main {
    public static int f(int[] dp, int n){
        if(n<=1) return n;
        
        if(dp[n]!=-1)  return dp[n];
        
        return dp[n]=f(dp,n-1)+f(dp,n-2);
    }
    public static void main(String[] args) {
        int n=5;
        int[] dp=new int[n+1];
        Arrays.fill(dp,-1);
        System.out.print(f(dp,n));
    }
}

Part -2: Tabulation

Time-complexity:O(N)  Space-complexity:O(N)
public static void main(String args[]) {
  int n=5;
  int dp[]=new int[n+1];
  Arrays.fill(dp,-1);
  dp[0]= 0;
  dp[1]= 1;
  
  for(int i=2; i<=n; i++){
      dp[i] = dp[i-1]+ dp[i-2];
  }
  System.out.println(dp[n]);

Part-3 Space Optimization

Time-complexity:O(N)  Space-complexity:O(1)
import java.util.*;
class Main {
    public static void main(String[] args) {
        int n=5;
        int prev=1,prev2=0;
        
        for(int i=2;i<=n;i++){
            int cur=prev2+prev;
            prev2=prev;
            prev=cur;
        }
        System.out.print(prev);
    }
}
