https://leetcode.com/problems/longest-increasing-path-in-a-matrix/description/

Memoization:Time-complexity:O(N*M)  Space-complexity:O(N*M)
import java.util.Arrays;

class Solution {
    public int func(int matrix[][], int i, int j, int prev, int dp[][]) {
        if (i < 0 || j < 0 || i >= matrix.length || j >= matrix[0].length || matrix[i][j] <= prev) {
            return 0;
        }
        if (dp[i][j] != -1) {
            return dp[i][j];
        }
        return dp[i][j] = 1 + Math.max(
            func(matrix, i + 1, j, matrix[i][j], dp),
            Math.max(
                func(matrix, i - 1, j, matrix[i][j], dp),
                Math.max(
                    func(matrix, i, j + 1, matrix[i][j], dp),
                    func(matrix, i, j - 1, matrix[i][j], dp)
                )
            )
        );
    }

    public int longestIncreasingPath(int[][] matrix) {
        int max = 0;
        int n = matrix.length, m = matrix[0].length;
        int[][] dp = new int[n][m]; // Correct dimensions for dp array
        for (int[] row : dp) {
            Arrays.fill(row, -1);
        }

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                max = Math.max(max, func(matrix, i, j, -1, dp));
            }
        }
        return max;
    }
}
