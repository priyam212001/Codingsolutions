https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/description/

Memoization:Time-complexity:O(N*2)  Space-compllexity:O(N*2)+O(N)
class Solution {
    public int func(int ind,int buy,int prices[],int n,int[][] dp){
        if(ind==n){
            return 0;
        }
        if(dp[ind][buy]!=-1) return dp[ind][buy];
       int profit=0;
        if(buy==1){
        profit=Math.max(-prices[ind]+func(ind+1,0,prices,n,dp),0+func(ind+1,1,prices,n,dp));
        }
        else{
          profit=Math.max(prices[ind]+func(ind+1,1,prices,n,dp),0+func(ind+1,0,prices,n,dp));
        }
        return dp[ind][buy]=profit;
    }
    public int maxProfit(int[] prices) {
        int n=prices.length;
        int dp[][]=new int[n][2];
        for(int[] row:dp) Arrays.fill(row,-1);
        return func(0,1,prices,n,dp);
    }
}

Tabulation:Time-complexity:O(N*2)  Space-compllexity:O(N*2)
class Solution {

    public int maxProfit(int[] prices) {
        int n=prices.length;
        int dp[][]=new int[n+1][3];
        for(int[] row:dp) Arrays.fill(row,0);
        dp[n][0]=dp[n][1]=0;

        for(int ind=n-1;ind>=0;ind--){
            for(int buy=0;buy<=1;buy++){
                 int profit=0;
                if(buy==1){
                  profit=Math.max(-prices[ind]+dp[ind+1][0],0+dp[ind+1][1]);
                }
               else{
                  profit=Math.max(prices[ind]+dp[ind+1][1],0+dp[ind+1][0]);
                }
               dp[ind][buy]=profit;
            }
        }
        return dp[0][1];
    }
}

Space-optimization:Time-complexity:O(N*2)  Space-compllexity:O(1)

class Solution {

    public int maxProfit(int[] prices) {
        int n=prices.length;
        
        int ahead[]=new int[2];
        int cur[]=new int[2];

        ahead[0]=ahead[1]=0;

        for(int ind=n-1;ind>=0;ind--){
            for(int buy=0;buy<=1;buy++){
                 int profit=0;
                if(buy==1){
                  profit=Math.max(-prices[ind]+ahead[0],0+ahead[1]);
                }
               else{
                  profit=Math.max(prices[ind]+ahead[1],0+ahead[0]);
                }
               cur[buy]=profit;
            }
            ahead=cur.clone();
        }
        return ahead[1];
    }
}
