https://takeuforward.org/plus/dsa/problems/sort-a-stack

Time-complexity:O(N*N)  Space-complexity:O(N)
import java.util.Stack;

public class SortStackDescending {

    // Function to sort the stack in descending order
    public static void sortStack(Stack<Integer> stack) {
        if (!stack.isEmpty()) {
            // Remove the top element
            int top = stack.pop();

            // Recursively sort the remaining stack
            sortStack(stack);

            // Insert the top element back in the sorted stack
            insert(stack, top);
        }
    }

    // Helper function to insert an element into the sorted stack
    private static void insert(Stack<Integer> stack, int element) {
        // Base case: If the stack is empty or the top of the stack is greater than or equal to the element
        if (stack.isEmpty() ) {
            stack.push(element);
            return;
        }
        int top=stack.pop();
        insert(stack,element);
        stack.push(top);
    }

    public static void main(String[] args) {
        Stack<Integer> stack = new Stack<>();
        stack.push(4);
        stack.push(1);
        stack.push(3);
        stack.push(2);

        System.out.println("Original Stack: " + stack);

        sortStack(stack);

        System.out.println("Sorted Stack (Descending Order): " + stack);
    }
}
