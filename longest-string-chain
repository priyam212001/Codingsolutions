https://leetcode.com/problems/longest-string-chain/description/

Time-complexity:(N^2 * l + NlogN)  Space-complexity:O(N)
class Solution {
    public boolean compare(String s1,String s2){
        if(s1.length()!=s2.length()+1) return false;

        int first=0,sec=0;

        while(first<s1.length()){
            if(sec<s2.length() && s1.charAt(first)==s2.charAt(sec)){
                first++; sec++;
            }
            else{
                first++;
            }
        }
        if(first==s1.length() && sec==s2.length()) return true;

        return false;
    }
    public int longestStrChain(String[] words) {
        int n=words.length;
        Arrays.sort(words,(a,b)->a.length()-b.length());

        int dp[]=new int[n];
        Arrays.fill(dp,1);

        int maxi=1;
        for(int i=0;i<n;i++){
            for(int prev=0;prev<i;prev++){
                if(compare(words[i],words[prev]) && 1+dp[prev]>dp[i]){
                    dp[i]=1+dp[prev];
                }
            }
            if(dp[i]>maxi){
              maxi=dp[i];
            }
        }


        return maxi;
    }
}
