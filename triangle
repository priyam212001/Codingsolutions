https://leetcode.com/problems/triangle/description/

Memoization: Time-complexity:O(N*N) Space-complexity:O(N*N) +O(N){path stack space}
class Solution {
    public static int func(int i,int j,List<List<Integer>> triangle,int[][] dp,int n){
        if(dp[i][j]!=-1) return dp[i][j];

        if(i==n-1) return triangle.get(i).get(j);

        int down=triangle.get(i).get(j)+func(i+1,j,triangle,dp,n);
        int dig=triangle.get(i).get(j)+func(i+1,j+1,triangle,dp,n);

        return dp[i][j]=Math.min(down,dig);
    }
    public int minimumTotal(List<List<Integer>> triangle) {
        int n=triangle.size();
        int[][] dp=new int[n][n];
        for(int[] row:dp){
            Arrays.fill(row,-1);
        }
        return func(0,0,triangle,dp,n);
    }
}

Tabulation:Time-complexity:O(N*N) Space-complexity:O(N*N)

class Solution {
   
    public int minimumTotal(List<List<Integer>> triangle) {
        int n=triangle.size();
        int[][] dp=new int[n][n];
        
        for(int j=0;j<n;j++){
            dp[n-1][j]=triangle.get(n-1).get(j);
        }

        for(int i=n-2;i>=0;i--){
            for(int j=i;j>=0;j--){

                int down=triangle.get(i).get(j)+dp[i+1][j];
                int dig=triangle.get(i).get(j)+dp[i+1][j+1];

                dp[i][j]=Math.min(down,dig);
            }
        }

        return dp[0][0];
    }
}

Space-complexity: Time-complexity:O(N*N) Space-complexity:O(1)

class Solution {
   
    public int minimumTotal(List<List<Integer>> triangle) {
        int n=triangle.size();
        int[] front=new int[n];
        int[] curr=new int[n];
        
        for(int j=0;j<n;j++){
            front[j]=triangle.get(n-1).get(j);
        }

        for(int i=n-2;i>=0;i--){
            for(int j=i;j>=0;j--){

                int down=triangle.get(i).get(j)+front[j];
                int dig=triangle.get(i).get(j)+front[j+1];

                curr[j]=Math.min(down,dig);
            }
            front=curr.clone();
        }

        return front[0];
    }
}
