https://leetcode.com/problems/min-cost-climbing-stairs/description/

Memoization:Time-complexity:O(N)  Space-complexity:O(N)+O(N)

class Solution {
    public int func(int n,int cost[],int dp[]){
        if(n<0) return 0;
        if(n==0 || n==1) return cost[n];
        if(dp[n]!=-1) return dp[n];

        return dp[n]=cost[n]+Math.min(func(n-1,cost,dp),func(n-2,cost,dp));
    }
    public int minCostClimbingStairs(int[] cost) {
        int n=cost.length;
        int dp[]=new int[n];
        Arrays.fill(dp,-1);
        return Math.min(func(n-1,cost,dp),func(n-2,cost,dp));
    }
}

Tabulation:Time-complexity:O(N)  Space-complexity:O(1)
class Solution {
    public int minCostClimbingStairs(int[] cost) {
        int n=cost.length;
        int dp[]=new int[n];
        Arrays.fill(dp,-1);
        dp[0]=cost[0];
        dp[1]=cost[1];

        for(int i=2;i<n;i++){
            dp[i]=cost[i]+Math.min(dp[i-1],dp[i-2]);
        }
        return Math.min(dp[n-1],dp[n-2]);
    }
}
