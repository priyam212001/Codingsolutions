https://leetcode.com/problems/longest-increasing-subsequence/description/

Memoization: Time-complexity:O(N*M)  Space-complexity:O(N*M)+O(N*N+1)
class Solution {
    public int func(int ind,int prev,int[] nums,int[][] dp){
        if(ind==nums.length) return 0;
        if(dp[ind][prev+1]!=-1) return dp[ind][prev+1];
        int take=0;
        if(prev==-1 || nums[ind]>nums[prev]){
        take=1+func(ind+1,ind,nums,dp);
        }
        int nontake=0+func(ind+1,prev,nums,dp);

        return dp[ind][prev+1]=Math.max(take,nontake);
    }
    public int lengthOfLIS(int[] nums) {
        int n=nums.length;
        int[][] dp=new int[n][n+1];
        for(int[] row:dp) Arrays.fill(row,-1);
        return func(0,-1,nums,dp);
    }
}

Tabulation:Time-complexity:O(N*M)  Space-complexity:O(N*M)
class Solution {
    public int func(int ind,int prev,int[] nums,int[][] dp){
        if(ind==nums.length) return 0;
        if(dp[ind][prev+1]!=-1) return dp[ind][prev+1];
        int take=0;
        if(prev==-1 || nums[ind]>nums[prev]){
        take=1+func(ind+1,ind,nums,dp);
        }
        int nontake=0+func(ind+1,prev,nums,dp);

        return dp[ind][prev+1]=Math.max(take,nontake);
    }
    public int lengthOfLIS(int[] nums) {
        int n=nums.length;
        int[][] dp=new int[n+1][n+1];
        for(int[] row:dp) Arrays.fill(row,0);

        for(int ind=n-1;ind>=0;ind--){
            for(int prev=ind-1;prev>=-1;prev--){
             int take=0;
           if(prev==-1 ||nums[ind]>nums[prev])
            take=1+dp[ind+1][ind+1];
        
        int nontake=0+dp[ind+1][prev+1];

         dp[ind][prev+1]=Math.max(take,nontake);
            }
        }
        
        return dp[0][-1+1];
    }
}
