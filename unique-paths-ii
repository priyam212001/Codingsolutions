https://leetcode.com/problems/unique-paths-ii/description/

Recursion: Time-limit exceeded
class Solution {
    public static int func(int m,int n, int[][] nums){
        if(m>=0 && n>=0 && nums[m][n]==1) return 0;
        if(m==0 && n==0) return 1;
        if(m<0 || n<0) return 0;

        int up=func(m-1,n,nums);
        int left=func(m,n-1,nums);
        return up+left;
    }
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int m=obstacleGrid.length;
        int n=obstacleGrid[0].length;
        return func(m-1,n-1,obstacleGrid);
    }
}

Mormoization: Time-complexity:O(M*N)  Space-complexity:OM*N)+Stack space
class Solution {
    public static int func(int m,int n, int[][] nums,int[][] dp){
        if(m>=0 && n>=0 && nums[m][n]==1) return 0;
        if(m==0 && n==0) return 1;
        if(m<0 || n<0) return 0;
        if(dp[m][n]!=-1) return dp[m][n];

        int up=func(m-1,n,nums,dp);
        int left=func(m,n-1,nums,dp);
        return dp[m][n]=up+left;
    }
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int m=obstacleGrid.length;
        int n=obstacleGrid[0].length;
        int[][] dp=new int[m][n];
        for(int row[]:dp){
            Arrays.fill(row,-1);
        }
        return func(m-1,n-1,obstacleGrid,dp);
    }
}

Tabulation:  Time-complexity:O(M*N)  Space-complexity:O(M*N)   No extra stack space is used.

class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int m=obstacleGrid.length;
        int n=obstacleGrid[0].length;
        int[][] dp=new int[m][n];
        
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(obstacleGrid[i][j]==1) dp[i][j]=0;
                else if(i==0 && j==0)  dp[i][j]=1;
                else{
                    int up=0,left=0;
                    if(i>0) up=dp[i-1][j];
                    if(j>0) left=dp[i][j-1];
        
                  dp[i][j]=up+left;
                }
            }
        }
        return dp[m-1][n-1];
     
    }
}
