https://leetcode.com/problems/permutation-in-string/description/

Time-complexity:O(N)  Space-complexity:O(1)
class Solution {
    public boolean checkInclusion(String s1, String s2) {
       if(s1.length()>s2.length()) return false;

       int[] freq1=new int[26];
       

       for(int i=0;i<s1.length();i++){
        freq1[s1.charAt(i)-'a']++;
       }
       int windsize=s1.length();

       for(int i=0;i<s2.length();i++){
        int windind=0,ind=i;
        int[] freq2=new int[26];
        while(windind<windsize && ind<s2.length()){
            freq2[s2.charAt(ind)-'a']++;
            windind++; ind++;
        }

        if(isSameFreq(freq1,freq2)){
            return true;
        }
       }
       return false;
    }

    public boolean isSameFreq(int freq1[],int freq2[]){
        for(int i=0;i<26;i++){
            if(freq1[i]!=freq2[i]){
                return false;
            }
        }
        return true;
    }
}
